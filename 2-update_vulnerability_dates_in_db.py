'''
    Read the SQL DB, read the vulnerabilities table. And recalculate and update dates :
    
    "created_at": "2019-11-05T15:38:12Z", 
    "first_found_on": "2019-11-05T15:38:12Z", 
    "last_seen_time": "2013-08-23T11:59:42.000Z", 
    "due_date": "2023-07-11", 
    "closed_at":"2023-07-10"
    
    In order to have recents dates for the demos ( old data will not be visible in Kenna tenant )
    
    v20230729
'''

import sys
import sqlite3
from crayons import *
from datetime import datetime, timedelta
import time
import random

def date_time():
    '''
        get current date time in yy-mm-ddTH:M:S:fZ format 
    '''
    current_time = datetime.utcnow()
    current_time = current_time.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
    current_date=current_time.split('T')[0]
    print('date : ',current_date)
    return(current_time,current_date)

def update_db(database,table,where_clause,sql_field_list,sql_data_list):
    liste=[]
    with sqlite3.connect(database) as conn:
        cursor=conn.cursor()
        sql_data=('')
        sql_data=sql_data_list
        sql_request=f"UPDATE {table} SET "
        for item in sql_field_list:
            sql_request = sql_request + item +' = ?, '
        sql_request = sql_request[:-2]
        sql_request = sql_request + where_clause
        print()
        print(sql_request)
        print()
        try:
            cursor.execute(sql_request,sql_data)
            for resultat in cursor:
                #print(resultat)        
                liste.append(resultat)
        except:
            sys.exit("couldn't update database")
    return(liste)   
    
def read_db(database,table,where_clause):
    '''
        read table with where clause in database 
    '''
    liste=[]
    with sqlite3.connect(database) as conn:
        cursor=conn.cursor()
        sql_request = f"SELECT * from {table} {where_clause}"
        #print()
        #print(sql_request)
        #print()
        try:
            cursor.execute(sql_request)
            for resultat in cursor:
                #print(resultat)        
                liste.append(resultat)
        except:
            sys.exit("couldn't read database")
    return(liste)

def current_date_plus_x_days(nb):   
    current_time = datetime.utcnow()
    print(green(current_time))
    start_time = current_time + timedelta(days=nb)
    timestampStr = start_time.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
    date=timestampStr.split('T')[0]
    return(date)  

def date_plus_x_days(datetime_str,nb):  
    # datetime_str  : date in the format 2023-07-28T12:29:49:22.123024Z
    print('datetime:',datetime_str) 
    datetime_object = datetime.strptime(datetime_str, "%Y-%m-%dT%H:%M:%S.%fZ")
    print('datetime obj:',yellow(datetime_object))    
    start_time = datetime_object + timedelta(days=nb)
    timestampStr = start_time.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
    date=timestampStr.split('T')[0]
    return(date)     
    
def recalculate_dates(database,table):   
    #new_date=date_plus_x_days(-11)
    #print('new date : ',new_date)
    #sys.exit()
    closeat=''
    #file=open('./temp/new_dates.txt','w')
    where=''
    resultats = read_db(database,table,where)    
    if resultats :
        for resultat in resultats:
            print(resultat)
            go=0
            created_at_date_list=resultat[20].split('T')
            days_before=0-random.randint(0,90)
            new_date_base=current_date_plus_x_days(days_before)            
            rand_nb=random.randint(0,90)
            #date_suffix=created_at_date_list[1].replace('Z','.000000Z')
            datetime_in=new_date_base+'T'+created_at_date_list[1]
            datetime_in=datetime_in.replace('Z','.000000Z')
            print(red(datetime_in,bold=True))
            new_created_at_date=new_date_base+'T'+created_at_date_list[1]
            first_found_on=new_created_at_date
            new_due_date=date_plus_x_days(datetime_in,30)
            x,today_date=date_time()
            rand_nb=random.randint(0,1)
            if rand_nb:
                closed=1
                new_closed_at=date_plus_x_days(datetime_in,60)
                last_seen=new_closed_at
            else:
                closed=0
                new_closed_at=''
                last_seen=date_plus_x_days(datetime_in,-4)
            if new_closed_at>today_date:
                new_closed_at=date_plus_x_days(datetime_in,10)
                last_seen=new_closed_at
            print(yellow(f'created_at_date : {created_at_date_list[0]}',bold=True))
            print(yellow(f'new created_at_date : {new_created_at_date}',bold=True))
            print(yellow(f'new due_date : {new_due_date}',bold=True))
            print(yellow(f'closed_date : {new_closed_at}',bold=True))     
            print(yellow(f'last_seen : {last_seen}',bold=True))            
            #a=input('STOP')            
            if resultat[26]:
                closeat=resultat[26]              
            else:
                closeat='--'  
            where_clause=' where id='+resultat[0]
            sql_fields=['created_at','first_found_on','due_date','closed_at','last_seen_time','closed']            
            sql_data_list=[new_created_at_date,first_found_on,new_due_date,new_closed_at,last_seen,closed]
            update_db('database.db','vulnerabilities',where_clause,sql_fields,sql_data_list)
            #ligne_out=str(resultat[1])+' ; '+resultat[20]+' ; '+resultat[21]+' ; '+resultat[22]+' ; '+resultat[23]+' ; '+resultat[24]+' ; '+resultat[25]+' ; '+closeat+' ; '+str(resultat[27])
            #file.write(ligne_out)
            #file.write('\n')
            #new_created_at=
    else:
        print('NO RESULTS')
    
if __name__=='__main__':
    database="database.db"
    table="vulnerabilities"
    recalculate_dates(database,table)
    print()
    print(green('OK ALL DONE !',bold=True))
    print()